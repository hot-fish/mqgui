#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6


import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import mqgui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    mqgui_support.set_Tk_var()
    top = Toplevel1(root)
    mqgui_support.init(root, top)
    root.mainloop()

w = None

def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    mqgui_support.set_Tk_var()
    top = Toplevel1(w)
    mqgui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])
        top.geometry("600x431+400+169")
        top.title("MQTT一体机  V1.1 互联")
        top.configure(background="#59d854")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.sub_menu = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="设置")
        self.sub_menu1 = tk.Menu(top, tearoff=0)
        self.sub_menu.add_cascade(menu=self.sub_menu1,
                                  activebackground="#ececec",
                                  activeforeground="#000000",
                                  background="#d9d9d9",
                                  font="TkMenuFont",
                                  foreground="#000000",
                                  label="语言设置")
        self.sub_menu1.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="中文")
        self.sub_menu1.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="English")
        self.sub_menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="启动设置")
        self.sub_menu12 = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="关于")
        self.sub_menu12.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#63d8b9",
            command=mqgui_support.btn_softinfo,
            font="TkMenuFont",
            foreground="#ffffff",
            label="软件信息")
        self.sub_menu12.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#6ed8b5",
            command=mqgui_support.btn_exit,
            compound="left",
            font="TkMenuFont",
            foreground="#ffffff",
            label="退出")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
        [('selected', _compcolor), ('active', _ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.017, rely=0.093, relheight=0.9
                              , relwidth=0.957)
        self.TNotebook1.configure(width=574)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="监控中心", compound="left", underline="-1", )
        self.TNotebook1_t0.configure(background="#d8d111")
        self.TNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t0.configure(highlightcolor="black")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="消息中心", compound="none", underline="-1", )
        self.TNotebook1_t1.configure(background="#88d8cd")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(2, text="连接设置", compound="left", underline="-1", )
        self.TNotebook1_t2.configure(background="#4389d8")
        self.TNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t2.configure(highlightcolor="black")
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.Labelframe1 = tk.LabelFrame(self.TNotebook1_t0)
        self.Labelframe1.place(relx=0.0, rely=0.028, relheight=0.958
                               , relwidth=0.456)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''发布区''')
        self.Labelframe1.configure(background="#00BFFF")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Labelframe1.configure(width=260)

        self.TCombobox_sentopic = ttk.Combobox(self.Labelframe1)
        self.TCombobox_sentopic.place(relx=0.308, rely=0.058, relheight=0.067
                                      , relwidth=0.627, bordermode='ignore')
        self.value_list = ["用户", "李燕", "/data/", "/data/alarm", "/data/message", "/data/notify", ]
        self.TCombobox_sentopic.configure(values=self.value_list)
        self.TCombobox_sentopic.configure(textvariable=mqgui_support.combobox_sendtopic)
        self.TCombobox_sentopic.configure(takefocus="")

        self.TCombobox_senqos = ttk.Combobox(self.Labelframe1)
        self.TCombobox_senqos.place(relx=0.308, rely=0.174, relheight=0.067
                                    , relwidth=0.627, bordermode='ignore')
        self.value_list = [0, 1, 2, ]
        self.TCombobox_senqos.configure(values=self.value_list)
        self.TCombobox_senqos.configure(textvariable=mqgui_support.combobox_sendqos)
        self.TCombobox_senqos.configure(takefocus="")

        self.TLabel12 = ttk.Label(self.Labelframe1)
        self.TLabel12.place(relx=0.038, rely=0.058, height=21, width=52
                            , bordermode='ignore')
        self.TLabel12.configure(background="#9370DB")
        self.TLabel12.configure(foreground="#ffffff")
        self.TLabel12.configure(font="TkDefaultFont")
        self.TLabel12.configure(relief="flat")
        self.TLabel12.configure(text='''发布主题''')

        self.TLabel13 = ttk.Label(self.Labelframe1)
        self.TLabel13.place(relx=0.038, rely=0.174, height=21, width=52
                            , bordermode='ignore')
        self.TLabel13.configure(background="#9370DB")
        self.TLabel13.configure(foreground="#ffffff")
        self.TLabel13.configure(font="TkDefaultFont")
        self.TLabel13.configure(relief="flat")
        self.TLabel13.configure(text='''发布质量''')

        self.style.map('TCheckbutton', background=
        [('selected', _bgcolor), ('active', _ana2color)])
        self.TCheckbutton3 = ttk.Checkbutton(self.Labelframe1)
        self.TCheckbutton3.place(relx=0.038, rely=0.261, relwidth=0.404
                                 , relheight=0.0, height=30, bordermode='ignore')
        self.TCheckbutton3.configure(variable=mqgui_support.tch97)
        self.TCheckbutton3.configure(takefocus="")
        self.TCheckbutton3.configure(text='''保留上次发布''')

        self.TLabel14 = ttk.Label(self.Labelframe1)
        self.TLabel14.place(relx=0.038, rely=0.377, height=21, width=52
                            , bordermode='ignore')
        self.TLabel14.configure(background="#9370DB")
        self.TLabel14.configure(foreground="#ffffff")
        self.TLabel14.configure(font="TkDefaultFont")
        self.TLabel14.configure(relief="flat")
        self.TLabel14.configure(text='''发布类型''')

        self.TCombobox_sendtype = ttk.Combobox(self.Labelframe1)
        self.TCombobox_sendtype.place(relx=0.308, rely=0.377, relheight=0.075
                                      , relwidth=0.615, bordermode='ignore')
        self.value_list = ["string", "json", "file", ]
        self.TCombobox_sendtype.configure(values=self.value_list)
        self.TCombobox_sendtype.configure(textvariable=mqgui_support.combobox_sendtype)
        self.TCombobox_sendtype.configure(takefocus="")

        self.TSeparator2 = ttk.Separator(self.Labelframe1)
        self.TSeparator2.place(relx=0.038, rely=0.449, relwidth=0.885
                               , bordermode='ignore')

        self.Text_sendmsg = tk.Text(self.Labelframe1)
        self.Text_sendmsg.place(relx=0.038, rely=0.551, relheight=0.325
                                , relwidth=0.9, bordermode='ignore')
        self.Text_sendmsg.configure(background="white")
        self.Text_sendmsg.configure(font="TkTextFont")
        self.Text_sendmsg.configure(foreground="black")
        self.Text_sendmsg.configure(highlightbackground="#d9d9d9")
        self.Text_sendmsg.configure(highlightcolor="black")
        self.Text_sendmsg.configure(insertbackground="black")
        self.Text_sendmsg.configure(selectbackground="#c4c4c4")
        self.Text_sendmsg.configure(selectforeground="black")
        self.Text_sendmsg.configure(width=234)
        self.Text_sendmsg.configure(wrap="word")

        self.TLabel15 = ttk.Label(self.Labelframe1)
        self.TLabel15.place(relx=0.038, rely=0.493, height=21, width=52
                            , bordermode='ignore')
        self.TLabel15.configure(background="#9370DB")
        self.TLabel15.configure(foreground="#ffffff")
        self.TLabel15.configure(font="TkDefaultFont")
        self.TLabel15.configure(relief="flat")
        self.TLabel15.configure(text='''发布内容''')

        self.Button_backsend = tk.Button(self.Labelframe1)
        self.Button_backsend.place(relx=0.038, rely=0.899, height=28, width=40
                                   , bordermode='ignore')
        self.Button_backsend.configure(activebackground="#ececec")
        self.Button_backsend.configure(activeforeground="#000000")
        self.Button_backsend.configure(background="#BDB76B")
        self.Button_backsend.configure(command=mqgui_support.btn_sendback)
        self.Button_backsend.configure(disabledforeground="#a3a3a3")
        self.Button_backsend.configure(foreground="#ffffff")
        self.Button_backsend.configure(highlightbackground="#d9d9d9")
        self.Button_backsend.configure(highlightcolor="black")
        self.Button_backsend.configure(pady="0")
        self.Button_backsend.configure(text='''←''')

        self.Button_clearsend = tk.Button(self.Labelframe1)
        self.Button_clearsend.place(relx=0.385, rely=0.899, height=28, width=40
                                    , bordermode='ignore')
        self.Button_clearsend.configure(activebackground="#ececec")
        self.Button_clearsend.configure(activeforeground="#000000")
        self.Button_clearsend.configure(background="#BDB76B")
        self.Button_clearsend.configure(command=mqgui_support.btn_sendclear)
        self.Button_clearsend.configure(disabledforeground="#a3a3a3")
        self.Button_clearsend.configure(foreground="#ffffff")
        self.Button_clearsend.configure(highlightbackground="#d9d9d9")
        self.Button_clearsend.configure(highlightcolor="black")
        self.Button_clearsend.configure(pady="0")
        self.Button_clearsend.configure(text='''X''')

        self.Button_publish = tk.Button(self.Labelframe1)
        self.Button_publish.place(relx=0.692, rely=0.899, height=28, width=60
                                  , bordermode='ignore')
        self.Button_publish.configure(activebackground="#ececec")
        self.Button_publish.configure(activeforeground="#000000")
        self.Button_publish.configure(background="#78C300")
        self.Button_publish.configure(command=mqgui_support.btn_send)
        self.Button_publish.configure(disabledforeground="#a3a3a3")
        self.Button_publish.configure(foreground="#ffffff")
        self.Button_publish.configure(highlightbackground="#d9d9d9")
        self.Button_publish.configure(highlightcolor="black")
        self.Button_publish.configure(pady="0")
        self.Button_publish.configure(text='''发布''')

        self.Button_selectfile = tk.Button(self.Labelframe1)
        self.Button_selectfile.place(relx=0.769, rely=0.261, height=28, width=40
                                     , bordermode='ignore')
        self.Button_selectfile.configure(activebackground="#ececec")
        self.Button_selectfile.configure(activeforeground="#000000")
        self.Button_selectfile.configure(background="#78C300")
        self.Button_selectfile.configure(command=mqgui_support.btn_selectfile)
        self.Button_selectfile.configure(disabledforeground="#a3a3a3")
        self.Button_selectfile.configure(foreground="#ffffff")
        self.Button_selectfile.configure(highlightbackground="#d9d9d9")
        self.Button_selectfile.configure(highlightcolor="black")
        self.Button_selectfile.configure(pady="0")
        self.Button_selectfile.configure(text='''. . .''')

        self.Labelframe2 = tk.LabelFrame(self.TNotebook1_t0)
        self.Labelframe2.place(relx=0.509, rely=0.028, relheight=0.958
                               , relwidth=0.439)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''订阅区''')
        self.Labelframe2.configure(background="#78C300")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")
        self.Labelframe2.configure(width=250)

        self.style.configure('Treeview.Heading', font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(self.Labelframe2)
        self.Scrolledtreeview1.place(relx=0.04, rely=0.116, relheight=0.29
                                     , relwidth=0.928, bordermode='ignore')
        self.Scrolledtreeview1.configure(columns="Col1 Col2")
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0", text="序号")
        self.Scrolledtreeview1.heading("#0", anchor="center")
        self.Scrolledtreeview1.column("#0", width="53")
        self.Scrolledtreeview1.column("#0", minwidth="20")
        self.Scrolledtreeview1.column("#0", stretch="1")
        self.Scrolledtreeview1.column("#0", anchor="w")
        self.Scrolledtreeview1.heading("Col1", text="主题")
        self.Scrolledtreeview1.heading("Col1", anchor="center")
        self.Scrolledtreeview1.column("Col1", width="110")
        self.Scrolledtreeview1.column("Col1", minwidth="20")
        self.Scrolledtreeview1.column("Col1", stretch="1")
        self.Scrolledtreeview1.column("Col1", anchor="center")
        self.Scrolledtreeview1.heading("Col2", text="质量")
        self.Scrolledtreeview1.heading("Col2", anchor="center")
        self.Scrolledtreeview1.column("Col2", width="50")
        self.Scrolledtreeview1.column("Col2", minwidth="20")
        self.Scrolledtreeview1.column("Col2", stretch="1")
        self.Scrolledtreeview1.column("Col2", anchor="center")

        self.TLabel9 = ttk.Label(self.Labelframe2)
        self.TLabel9.place(relx=0.32, rely=0.029, height=21, width=64
                           , bordermode='ignore')
        self.TLabel9.configure(background="#00BFFF")
        self.TLabel9.configure(foreground="#ffffff")
        self.TLabel9.configure(font="TkDefaultFont")
        self.TLabel9.configure(relief="flat")
        self.TLabel9.configure(text='''已订阅内容''')

        self.TCombobox_subtopic = ttk.Combobox(self.Labelframe2)
        self.TCombobox_subtopic.place(relx=0.12, rely=0.638, relheight=0.067
                                      , relwidth=0.652, bordermode='ignore')
        self.value_list = ["用户", "李燕", "/data/", "/data/alarm", "/data/message", "/data/notify", ]
        self.TCombobox_subtopic.configure(values=self.value_list)
        self.TCombobox_subtopic.configure(textvariable=mqgui_support.combobox_subtopic)
        self.TCombobox_subtopic.configure(takefocus="")

        self.TCombobox_subqos = ttk.Combobox(self.Labelframe2)
        self.TCombobox_subqos.place(relx=0.12, rely=0.812, relheight=0.067
                                    , relwidth=0.652, bordermode='ignore')
        self.value_list = [0, 1, 2, ]
        self.TCombobox_subqos.configure(values=self.value_list)
        self.TCombobox_subqos.configure(textvariable=mqgui_support.combobox_subqos)
        self.TCombobox_subqos.configure(takefocus="")

        self.TLabel10 = ttk.Label(self.Labelframe2)
        self.TLabel10.place(relx=0.28, rely=0.551, height=21, width=52
                            , bordermode='ignore')
        self.TLabel10.configure(background="#9370DB")
        self.TLabel10.configure(foreground="#ffffff")
        self.TLabel10.configure(font="TkDefaultFont")
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(text='''订阅主题''')

        self.TLabel11 = ttk.Label(self.Labelframe2)
        self.TLabel11.place(relx=0.28, rely=0.725, height=21, width=52
                            , bordermode='ignore')
        self.TLabel11.configure(background="#9370DB")
        self.TLabel11.configure(foreground="#ffffff")
        self.TLabel11.configure(font="TkDefaultFont")
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(text='''订阅质量''')

        self.TSeparator1 = ttk.Separator(self.Labelframe2)
        self.TSeparator1.place(relx=0.0, rely=0.507, relwidth=0.96
                               , bordermode='ignore')

        self.Button_cancelsub = tk.Button(self.Labelframe2)
        self.Button_cancelsub.place(relx=0.04, rely=0.406, height=28, width=83
                                    , bordermode='ignore')
        self.Button_cancelsub.configure(activebackground="#ececec")
        self.Button_cancelsub.configure(activeforeground="#000000")
        self.Button_cancelsub.configure(background="#00BFFF")
        self.Button_cancelsub.configure(command=mqgui_support.btn_cancelsub)
        self.Button_cancelsub.configure(disabledforeground="#a3a3a3")
        self.Button_cancelsub.configure(foreground="#ffffff")
        self.Button_cancelsub.configure(highlightbackground="#d9d9d9")
        self.Button_cancelsub.configure(highlightcolor="black")
        self.Button_cancelsub.configure(pady="0")
        self.Button_cancelsub.configure(text='''取消所选订阅''')

        self.Button_clearsub = tk.Button(self.Labelframe2)
        self.Button_clearsub.place(relx=0.64, rely=0.406, height=28, width=83
                                   , bordermode='ignore')
        self.Button_clearsub.configure(activebackground="#ececec")
        self.Button_clearsub.configure(activeforeground="#000000")
        self.Button_clearsub.configure(background="#00BFFF")
        self.Button_clearsub.configure(command=mqgui_support.btn_clearsub)
        self.Button_clearsub.configure(disabledforeground="#a3a3a3")
        self.Button_clearsub.configure(foreground="#ffffff")
        self.Button_clearsub.configure(highlightbackground="#d9d9d9")
        self.Button_clearsub.configure(highlightcolor="black")
        self.Button_clearsub.configure(pady="0")
        self.Button_clearsub.configure(text='''清空订阅列表''')

        self.Button_addsub = tk.Button(self.Labelframe2)
        self.Button_addsub.place(relx=0.28, rely=0.899, height=28, width=59
                                 , bordermode='ignore')
        self.Button_addsub.configure(activebackground="#ececec")
        self.Button_addsub.configure(activeforeground="#000000")
        self.Button_addsub.configure(background="#00BFFF")
        self.Button_addsub.configure(command=mqgui_support.btn_addsub)
        self.Button_addsub.configure(disabledforeground="#a3a3a3")
        self.Button_addsub.configure(foreground="#ffffff")
        self.Button_addsub.configure(highlightbackground="#d9d9d9")
        self.Button_addsub.configure(highlightcolor="black")
        self.Button_addsub.configure(pady="0")
        self.Button_addsub.configure(text='''添加订阅''')

        self.Frame1 = tk.Frame(self.TNotebook1_t1)
        self.Frame1.place(relx=0.018, rely=0.028, relheight=0.931
                          , relwidth=0.939)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d8ac72")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=535)

        self.Scrolledtext1 = ScrolledText(self.Frame1)
        self.Scrolledtext1.place(relx=0.019, rely=0.03, relheight=0.851
                                 , relwidth=0.955)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap="none")

        self.Button_savemsg = tk.Button(self.Frame1)
        self.Button_savemsg.place(relx=0.449, rely=0.896, height=28, width=59)
        self.Button_savemsg.configure(activebackground="#ececec")
        self.Button_savemsg.configure(activeforeground="#000000")
        self.Button_savemsg.configure(background="#78C300")
        self.Button_savemsg.configure(command=mqgui_support.btn_savemsg)
        self.Button_savemsg.configure(disabledforeground="#a3a3a3")
        self.Button_savemsg.configure(foreground="#ffffff")
        self.Button_savemsg.configure(highlightbackground="#d9d9d9")
        self.Button_savemsg.configure(highlightcolor="black")
        self.Button_savemsg.configure(pady="0")
        self.Button_savemsg.configure(text='''消息入库''')

        self.Button_readhistory = tk.Button(self.Frame1)
        self.Button_readhistory.place(relx=0.617, rely=0.896, height=28
                                      , width=83)
        self.Button_readhistory.configure(activebackground="#ececec")
        self.Button_readhistory.configure(activeforeground="#000000")
        self.Button_readhistory.configure(background="#78C300")
        self.Button_readhistory.configure(command=mqgui_support.btn_readhistory)
        self.Button_readhistory.configure(disabledforeground="#a3a3a3")
        self.Button_readhistory.configure(foreground="#ffffff")
        self.Button_readhistory.configure(highlightbackground="#d9d9d9")
        self.Button_readhistory.configure(highlightcolor="black")
        self.Button_readhistory.configure(pady="0")
        self.Button_readhistory.configure(text='''查看历史消息''')

        self.Button_clearmsg = tk.Button(self.Frame1)
        self.Button_clearmsg.place(relx=0.841, rely=0.896, height=28, width=59)
        self.Button_clearmsg.configure(activebackground="#ececec")
        self.Button_clearmsg.configure(activeforeground="#000000")
        self.Button_clearmsg.configure(background="#78C300")
        self.Button_clearmsg.configure(command=mqgui_support.btn_clearmsg)
        self.Button_clearmsg.configure(disabledforeground="#a3a3a3")
        self.Button_clearmsg.configure(foreground="#ffffff")
        self.Button_clearmsg.configure(highlightbackground="#d9d9d9")
        self.Button_clearmsg.configure(highlightcolor="black")
        self.Button_clearmsg.configure(pady="0")
        self.Button_clearmsg.configure(text='''清空消息''')

        self.TCheckbutton_automsgsave = ttk.Checkbutton(self.Frame1)
        self.TCheckbutton_automsgsave.place(relx=0.019, rely=0.896, relwidth=0.187
                                            , relheight=0.0, height=30)
        self.TCheckbutton_automsgsave.configure(variable=mqgui_support.tch50)
        self.TCheckbutton_automsgsave.configure(takefocus="")
        self.TCheckbutton_automsgsave.configure(text='''消息自动入库''')

        self.Button_savefiles = tk.Button(self.Frame1)
        self.Button_savefiles.place(relx=0.262, rely=0.896, height=28, width=71)
        self.Button_savefiles.configure(activebackground="#ececec")
        self.Button_savefiles.configure(activeforeground="#000000")
        self.Button_savefiles.configure(background="#78C300")
        self.Button_savefiles.configure(command=mqgui_support.btn_savefiles)
        self.Button_savefiles.configure(disabledforeground="#a3a3a3")
        self.Button_savefiles.configure(foreground="#ffffff")
        self.Button_savefiles.configure(highlightbackground="#d9d9d9")
        self.Button_savefiles.configure(highlightcolor="black")
        self.Button_savefiles.configure(pady="0")
        self.Button_savefiles.configure(text='''保存到文件''')

        self.TEntry_clientname = ttk.Entry(self.TNotebook1_t2)
        self.TEntry_clientname.place(relx=0.035, rely=0.111, relheight=0.064
                                     , relwidth=0.256)
        self.TEntry_clientname.configure(textvariable=mqgui_support.entrytv_clientname)
        self.TEntry_clientname.configure(takefocus="")
        self.TEntry_clientname.configure(cursor="ibeam")

        self.TEntry_clientid = ttk.Entry(self.TNotebook1_t2)
        self.TEntry_clientid.place(relx=0.386, rely=0.111, relheight=0.064
                                   , relwidth=0.256)
        self.TEntry_clientid.configure(textvariable=mqgui_support.entrytv_clientid)
        self.TEntry_clientid.configure(takefocus="")
        self.TEntry_clientid.configure(cursor="ibeam")

        self.TLabel1 = ttk.Label(self.TNotebook1_t2)
        self.TLabel1.place(relx=0.07, rely=0.028, height=21, width=104)
        self.TLabel1.configure(background="#78C300")
        self.TLabel1.configure(foreground="#ffffff")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(text='''MQTT 客户端名称''')

        self.TLabel2 = ttk.Label(self.TNotebook1_t2)
        self.TLabel2.place(relx=0.439, rely=0.028, height=21, width=89)
        self.TLabel2.configure(background="#78C300")
        self.TLabel2.configure(foreground="#ffffff")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(text='''MQTT客户端ID''')

        self.TLabel3 = ttk.Label(self.TNotebook1_t2)
        self.TLabel3.place(relx=0.07, rely=0.194, height=21, width=100)
        self.TLabel3.configure(background="#78C300")
        self.TLabel3.configure(foreground="#ffffff")
        self.TLabel3.configure(font="TkDefaultFont")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(text='''MQTT服务器类型''')

        self.TLabel4 = ttk.Label(self.TNotebook1_t2)
        self.TLabel4.place(relx=0.439, rely=0.194, height=21, width=88)
        self.TLabel4.configure(background="#78C300")
        self.TLabel4.configure(foreground="#ffffff")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(text='''MQTT连接协议''')

        self.TLabel5 = ttk.Label(self.TNotebook1_t2)
        self.TLabel5.place(relx=0.07, rely=0.361, height=21, width=100)
        self.TLabel5.configure(background="#78C300")
        self.TLabel5.configure(foreground="#ffffff")
        self.TLabel5.configure(font="TkDefaultFont")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(text='''MQTT服务器地址''')

        self.TLabel6 = ttk.Label(self.TNotebook1_t2)
        self.TLabel6.place(relx=0.421, rely=0.361, height=21, width=112)
        self.TLabel6.configure(background="#78C300")
        self.TLabel6.configure(foreground="#ffffff")
        self.TLabel6.configure(font="TkDefaultFont")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(text='''MQTT服务器端口号''')

        self.TLabel7 = ttk.Label(self.TNotebook1_t2)
        self.TLabel7.place(relx=0.105, rely=0.528, height=21, width=64)
        self.TLabel7.configure(background="#78C300")
        self.TLabel7.configure(foreground="#ffffff")
        self.TLabel7.configure(font="TkDefaultFont")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(text='''设备用户名''')

        self.TLabel8 = ttk.Label(self.TNotebook1_t2)
        self.TLabel8.place(relx=0.474, rely=0.528, height=21, width=52)
        self.TLabel8.configure(background="#78C300")
        self.TLabel8.configure(foreground="#ffffff")
        self.TLabel8.configure(font="TkDefaultFont")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(text='''设备密码''')

        self.TCheckbutton_autoconnect = ttk.Checkbutton(self.TNotebook1_t2)
        self.TCheckbutton_autoconnect.place(relx=0.035, rely=0.806, relwidth=0.14
                                            , relheight=0.0, height=30)
        self.TCheckbutton_autoconnect.configure(variable=mqgui_support.tch68)
        self.TCheckbutton_autoconnect.configure(takefocus="")
        self.TCheckbutton_autoconnect.configure(text='''自动连接''')

        self.TCombobox_mqtype = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_mqtype.place(relx=0.035, rely=0.278, relheight=0.064
                                    , relwidth=0.286)
        self.value_list = ["EMQ", "Apollo", ]
        self.TCombobox_mqtype.configure(values=self.value_list)
        self.TCombobox_mqtype.configure(textvariable=mqgui_support.combobox_servertype)
        self.TCombobox_mqtype.configure(takefocus="")

        self.TCombobox_mqsl = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_mqsl.place(relx=0.386, rely=0.278, relheight=0.064
                                  , relwidth=0.286)
        self.value_list = ["tcp", "ws", "ssl", ]
        self.TCombobox_mqsl.configure(values=self.value_list)
        self.TCombobox_mqsl.configure(textvariable=mqgui_support.combobox_mqsl)
        self.TCombobox_mqsl.configure(takefocus="")

        self.TCombobox_mqport = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_mqport.place(relx=0.386, rely=0.444, relheight=0.064
                                    , relwidth=0.286)
        self.value_list = [1883, 8083, 8883, 61613, 61623, ]
        self.TCombobox_mqport.configure(values=self.value_list)
        self.TCombobox_mqport.configure(textvariable=mqgui_support.combobox_mqport)
        self.TCombobox_mqport.configure(takefocus="")

        self.TCombobox_mqip = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_mqip.place(relx=0.035, rely=0.444, relheight=0.064
                                  , relwidth=0.286)
        self.value_list = ["127.0.0.1", "47.93.30.53", ]
        self.TCombobox_mqip.configure(values=self.value_list)
        self.TCombobox_mqip.configure(textvariable=mqgui_support.combobox_mqip)
        self.TCombobox_mqip.configure(takefocus="")

        self.TCombobox_username = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_username.place(relx=0.035, rely=0.611, relheight=0.064
                                      , relwidth=0.286)
        self.value_list = ["admin", "liyan", ]
        self.TCombobox_username.configure(values=self.value_list)
        self.TCombobox_username.configure(textvariable=mqgui_support.combobox_username)
        self.TCombobox_username.configure(takefocus="")

        self.TCombobox_pwd = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_pwd.place(relx=0.386, rely=0.611, relheight=0.064
                                 , relwidth=0.286)
        self.value_list = ["public", "admin", "123456", ]
        self.TCombobox_pwd.configure(values=self.value_list)
        self.TCombobox_pwd.configure(show="*")
        self.TCombobox_pwd.configure(textvariable=mqgui_support.combobox_pwd)
        self.TCombobox_pwd.configure(takefocus="")

        self.TCheckbutton_automoren = ttk.Checkbutton(self.TNotebook1_t2)
        self.TCheckbutton_automoren.place(relx=0.684, rely=0.444, relwidth=0.132
                                          , relheight=0.0, height=30)
        self.TCheckbutton_automoren.configure(variable=mqgui_support.tch76)
        self.TCheckbutton_automoren.configure(takefocus="")
        self.TCheckbutton_automoren.configure(text='''自动默认''')

        self.Button_showhide = tk.Button(self.TNotebook1_t2)
        self.Button_showhide.place(relx=0.684, rely=0.611, height=28, width=50)
        self.Button_showhide.configure(activebackground="#ececec")
        self.Button_showhide.configure(activeforeground="#000000")
        self.Button_showhide.configure(background="#00BFFF")
        self.Button_showhide.configure(command=mqgui_support.btn_showhide)
        self.Button_showhide.configure(disabledforeground="#a3a3a3")
        self.Button_showhide.configure(foreground="#ffffff")
        self.Button_showhide.configure(highlightbackground="#d9d9d9")
        self.Button_showhide.configure(highlightcolor="black")
        self.Button_showhide.configure(pady="0")
        self.Button_showhide.configure(text='''显示''')

        self.Button_randomgener = tk.Button(self.TNotebook1_t2)
        self.Button_randomgener.place(relx=0.649, rely=0.111, height=28
                                      , width=59)
        self.Button_randomgener.configure(activebackground="#ececec")
        self.Button_randomgener.configure(activeforeground="#000000")
        self.Button_randomgener.configure(background="#00BFFF")
        self.Button_randomgener.configure(command=mqgui_support.btn_randomgerner)
        self.Button_randomgener.configure(disabledforeground="#a3a3a3")
        self.Button_randomgener.configure(foreground="#ffffff")
        self.Button_randomgener.configure(highlightbackground="#d9d9d9")
        self.Button_randomgener.configure(highlightcolor="black")
        self.Button_randomgener.configure(pady="0")
        self.Button_randomgener.configure(text='''随机生成''')

        self.Button_savesettings = tk.Button(self.TNotebook1_t2)
        self.Button_savesettings.place(relx=0.246, rely=0.806, height=28
                                       , width=59)
        self.Button_savesettings.configure(activebackground="#ececec")
        self.Button_savesettings.configure(activeforeground="#000000")
        self.Button_savesettings.configure(background="#00BFFF")
        self.Button_savesettings.configure(command=mqgui_support.btn_savesettings)
        self.Button_savesettings.configure(disabledforeground="#a3a3a3")
        self.Button_savesettings.configure(foreground="#ffffff")
        self.Button_savesettings.configure(highlightbackground="#d9d9d9")
        self.Button_savesettings.configure(highlightcolor="black")
        self.Button_savesettings.configure(pady="0")
        self.Button_savesettings.configure(text='''保存设置''')

        self.Button_connect = tk.Button(top)
        self.Button_connect.place(relx=0.017, rely=0.023, height=28, width=100)
        self.Button_connect.configure(activebackground="#ececec")
        self.Button_connect.configure(activeforeground="#000000")
        self.Button_connect.configure(background="#00BFFF")
        self.Button_connect.configure(command=mqgui_support.btn_connect)
        self.Button_connect.configure(disabledforeground="#a3a3a3")
        self.Button_connect.configure(foreground="#ffffff")
        self.Button_connect.configure(highlightbackground="#d9d9d9")
        self.Button_connect.configure(highlightcolor="black")
        self.Button_connect.configure(pady="0")
        self.Button_connect.configure(text='''开始连接''')

        self.TProgressbar1 = ttk.Progressbar(top)
        self.TProgressbar1.place(relx=0.633, rely=0.023, relwidth=0.25
                                 , relheight=0.0, height=22)
        self.TProgressbar1.configure(variable=mqgui_support.tpb_send)
        self.TProgressbar1.configure(value="0.5")

        self.TLabel_jindu = ttk.Label(top)
        self.TLabel_jindu.place(relx=0.9, rely=0.023, height=21, width=40)
        self.TLabel_jindu.configure(background="#00BFFF")
        self.TLabel_jindu.configure(foreground="#ffffff")
        self.TLabel_jindu.configure(font="TkDefaultFont")
        self.TLabel_jindu.configure(relief="flat")
        self.TLabel_jindu.configure(textvariable=mqgui_support.labletv_jindu)

        self.TEntry_filepath = ttk.Entry(top)
        self.TEntry_filepath.place(relx=0.25, rely=0.023, relheight=0.053
                                   , relwidth=0.36)
        self.TEntry_filepath.configure(textvariable=mqgui_support.entrytv_filepath)
        self.TEntry_filepath.configure(takefocus="")
        self.TEntry_filepath.configure(cursor="ibeam")
# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform

def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()
